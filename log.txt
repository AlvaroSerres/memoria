To do list:

=====================================================================
*Crear main para dedo índice con la opción de controlar 2 o 3 servos.
En caso de 2 servos, el tercero debiese calcularse para estar mirando 
"hacia adentro":

    Agregado (3/11/16): [main_indice.py]
        El tercer servo se calcula de forma automática
        y no influye en el flag de limitación. Se debe
        agregar como argumento al instanciar al controlador.
        Considera que sólo hay una yema verde visible 
        (el dedo pulgar queda hacia abajo).

    Agregado (7/11/16): [main_indice.py], [mis_funciones.py]
        Una función para guardar datos en formato json.
        Pensado para guardar una estructura de datos que 
        imcluya a las primitivas generadas (para su 
        posterior análisis o uso).
        También hubo que agregar una función para convertir
        arreglos numpy a listas antes de guardarlos en 
        formato JSON. La función se llama
        "primitivas_np2list()"
    
    Modificación: (4/11/2016): [main_indice.py]
        Considera ambas yemas verdes visibles, por lo que 
        se debe usar la máscara para dividir la imagen en 2.
        Además, para que la yema del pulgar sea visible, hay que 
        subir ese dedo (nueva posición "inicial"). Solo cuando
        se controle el dedo índice se debe activar al flag de 
        yema_pulgar_visible. Si se controla el anular (blue) no se
        necesita (dejarla en False, como por defecto). Si se controla
        el dedo pulgar, entonces necesariamente se ven ambas yemas.

        El punto a objetivo ya no es el centroide del objeto, sino
        que un punto de su contorno (alineado con su centroide).

    Modificación (9/11/2016): [main_indice.py] [mis_funciones.py]
        Se agregó la posibilidad de explorar dentro del loop en que
        se calculan las primitivas. El flag de yema pulgar visible
        ahora es atributo de la mano. Al instanciar un objeto mano
        se puede especificar la posición inical del pulgar. Si 
        la yema es visible o no se maneja internamente en la clase mano
        (se supone que la altura no va a cambiar).

    Modificar: Al usar el controlador con tres motores (-m 3) este
        no puede resolver la ponderación de primitivas debido a 
        que el tercer servo está al límite al momento de explorar.
        Así, una columna completa de la matriz de diferencias es 
        cero.


    Modificar: Hacer el "determinar_contacto" más estable. 
        si un punto de contacto está en pixel 0,algo o fuea de la 
        imagen, entonces volver a intentarlo. Además los puntos de 
        agarre deben estar alejados entre sí, al menos por 2*Offset.

    Modificar: Hacer que el punto de tracking de la yema no sea el
        centroide sino que un punto del contorno de la yema.
       
       ***
        Esto ya lo probé y no funcionó debido a lo cambiante o
        inestable que es el contorno de la yema (reflejos), no así
        el centroide
        Basta modificar el "1_puntos_agarre_vivo.py" para filtrar
        por verde.
        ***

    Modificar: El movimiento del dedo por primitivas calculadas
        a veces es muy errático y se acerca mucho al objeto 
        (incluso puede tocarlo y aplastarlo). Por esto, conviene
        poder saltar desde el loop de generación de primitivas 
        al ajuste fino (si es que la distancia entre contornos 
        es relativamente pequeña). Así, si el dedo está cerca en 
        la horizontal, pero lejos en la vertical, no se sigue con
        el cálculo de primitivas, sino que se procede a "cerrar la 
        mano".

        Agregado (9/11/16): Dentro del loop de generación de primitivas
        se revisa la distancia entre contornos. Si esa distancia es 
        pequeña, esntonces se pasa al control de ajuste fino.


    ================================================================
            C O N T R O L    D E    A J U S T E    F I N O

    Modificar: Agregar un control de ajuste fino en que se mueva 
        el dedo de a poco y se evalúe cada vez si es que hay
        contacto entre las yemas y el objeto (or de máscaras de 
        color verde y rojo).

        Agregado (8/11/16): Control de ajuste fino mueve el servo
            1 del dedo índice en 3 grados (si distancia es mayor 
            a 7 pixeles) o en 1 grado en otro caso. Luego de determinar
            que hay contacto, se mueve 1 grado extra para tratar de 
            asegurar que efectivamente haya contacto objeto-yema.

    Modificar: Control de ajuste fino sólo mueve el servo 1,
        se puede agregar una compensación por parte del 
        tercer servo para que quede mirando "hacia adentro".

        Agregado (9/11/16): Hay compensación de ángulo por
            parte del tercer servo, excepto en el último 
            movimiento.

    ================================================================


    Modificar: Si un servo está al límite (servo 2) y la primitiva
        calculada no se puede ejecutar, entonces se debe usar otro
        servo (servo 1), moviéndolo en la misma dirección y más
        o menos en el mismo ángulo que se quería mover el servo 2.

        Agregué: Atributo limites a la clase controlador, son 
             limites del dedo a controlar.

        OBS: Cuando el objeto está muy cerca de la palma, entonces
        el servo 1 se abre mientras que el servo 2 se cierra y llega
        a su límite. 

         ***IMPORTANTE***
         Si el servo está al limite, entonces se debiese revalcular 
         sbiendo que una de las ponderaciones es cero. Osea, el sistema 
         cambia...

    Modificar: Si una primitiva hace que el servo llegue al límite, 
        entonces esa primitiva no se considera en el futuro para
        el cálculo de nuevas primitivas. Ahora, se puede incluir 
        usando la magnitud efectiva (desde la posición inicial
        a la posición final, en donde se limitó).

=====================================================================
*Crear main para dedo pulgar para controlar 2 servos (altura fija):

    Modificar: Para mover dos o más dedos al "mismo tiempo", habrá
        que poner un flag de "no_wait" en la función mover() de la mano,
        que, a su vez, se la traspase a la función de comunicación serial.
        Así, se suprime la espera para alguno de los movimientos (el 
        primero que se haga).

    IDEA: Como el pulgar tiene el primer servo fijo (determina la altura),
        entonces sólo hay que controlar 2 servos. Para eso se puede
        usar el mismo algoritmo de dos servos que se esstá usando
        con el dedo índice...pero también de puede hacer esto:

        (1) El servo 2 se controla únicamente a partir de la distancia
        mínima entre contornos (la distancia que entrega la función
        "hay contacto").

        (2) El servo 3 se calcula automáticamente para que apunte
        "hacia adentro".

    ACTUALIZACIÓN: Modificar la clase controlador para agregar al pulgar
        es horrible, asi que conviene hacer algo distinto y más 
        simple para el pulgar. EJ: sólo ajuste "fino".

    Modificar: En definitiva, para el control del dedo pulgar consideraré
        sólo el uso del segundo servo. El tercero sólo compensará
        para que la yema quede apuntando "hacia adentro".

        La magnitud de variación para el segundo servo se puede 
        cacular así:
    
        - Obtener posición inicial
        - Mover el servo para que se "cierre" (aleatorio a prdefinido)
        - Obtener posición final y calcula el desplazamiento en la imagen.
        - La variación horizontal se usará para determinar cuanto mover el
            servo. La vertical se usará para determinar si el objeto es 
            alcanzable o no.
        - Una vez cerca del objeto (punto de agarre *lejano alcanzado
            o distancia entre contornos es pequeña), se puede hacer un ajuste
            fino idéntico a lo que se hace con el dedo índice.


    APLICAR TODO EL CONTROLADOR DEL DEDO PULGAR EN UNA NUEVA CLASE, EN 
    EL MISMO MÓDULO DE CONTROLADOR.PY (CAMBIAR EL NOMBRE A 
    CONTROLADORES.PY


=====================================================================
*Crear main para dedo anular con la opción de controlar 2 o 3 servos:
En caso de 2 servos, el tercero debiese calcularse para estar mirando 
"hacia adentro":

=====================================================================
*Crear main para dedo índice (2 o 3 motores) y pulgar

=====================================================================
*Añadir flag en en función de creación de primitiva en caso de que no 
se haya podido calcular. Así, en el main se podrá decidir explorar:

    Agregado (3/10/16): En la excepción se llevan todos los flags 
        a False. Luego, el flag de explorar se lleva a True.

=====================================================================
*Añadir la posibilidad de explorar con un único motor (el primero)
para el caso en que no se haya podido calcular una primitiva.
Eliminar aleatoriedad en ese caso?

    Agregado (4/11/16): Ahora hay un flag de "primera_exploración"
        para la clase controlador. Cuando es True, entonces el 
        número de pasos de exploración equivale a la cantidad de 
        motores a controlar. En otro caso, sólo se mueve el primer 
        servo (el más cercano a la palma).

=====================================================================
=====================================================================
=====================================================================

